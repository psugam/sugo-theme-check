body {
  background-color: rgb(211, 205, 199);
  color: #222;
  font-family: Georgia, 'Times New Roman', Times, serif; /* This Georgia font looks good for now. Trying to find a more mediaeval looking font.*/
  line-height: 1.5;
  margin-left: auto;
  margin-right: auto; /* Center the content. perhaps it could be done in one line just checking */
  max-width: 768px;  /* Set a max-width for the content ie for post body etc. This is for large devices only ofc */
  padding-left: 1rem;
  padding-right: 1rem;
}

@media (max-width: 800px) {
  body {
    max-width: 100%;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }
}

header {
  /* border-bottom: 1px solid #222; */
  margin-bottom: 1rem;
}
header h1 {
  text-align: center;
}

footer {
  /* border-top: 1px solid #222; */
  margin-top: 3rem;
  text-align: center;
}

a {
  color: #00e;
  text-decoration: none;
}

nav ul {
  display: flex;
  gap: 0;
  justify-content: center;
  padding: 0;
  margin: 0;
  margin-bottom: 1rem;
}
nav ul li {
  display: flex;
  align-items: center;
  list-style: none;
}
@media (min-width: 601px) {
  nav ul li:not(:last-child)::after {
    content: ' · ';
    color: inherit;
    margin: 0;
    font-size: 1.1em;
    pointer-events: none;
    user-select: none;
  }
}
@media (max-width: 600px) {
  nav ul {
    gap: 2rem;
  }
  nav ul li:not(:last-child)::after {
    content: none;
  }
}

/* Post meta interpunct for date, reading time, word count */
.post-meta {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  flex-wrap: wrap;
  font-size: 1rem;
  color: inherit;
}
.post-meta span {
  display: flex;
  align-items: center;
}
@media (min-width: 601px) {
  .post-meta span:not(:last-child)::after {
    content: ' · ';
    color: inherit;
    margin: 0 0.25rem;
    font-size: 1.1em;
    pointer-events: none;
    user-select: none;
  }
}
@media (max-width: 600px) {
  .post-meta {
    gap: 1rem;
  }
  .post-meta span:not(:last-child)::after {
    content: none;
  }
}

h1 {
  text-align: left;
}

body.darkmode {
  background: #23272e;
  color: #e0e0e0;
}
body.darkmode header,
body.darkmode footer {
  background: #23272e;
  color: #e0e0e0;
}
body.darkmode a {
  color: #8ecae6;
}
body.darkmode nav ul {
  background: transparent;
}

#menu-toggle {
  display: none;
}
#main-menu.hide-menu {
  display: flex;
}
@media (max-width: 600px) {
  #main-menu {
    display: none;
    flex-direction: column;
    background: var(--menu-bg-color, rgba(255, 251, 240, 0.9)); /* Cream color for light mode */
    opacity: 100%;
    position: absolute;
    top: 2.5rem;
    right: 0;
    left: 0;
    margin: 0 auto;
    width: 90vw;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    border-radius: 0.5rem;
    z-index: 999;
  }
  #main-menu.open {
    display: flex;
    margin-left: 2.5rem; /* Add margin after hamburger when open */
  }
  #menu-toggle {
    display: inline-block;
    background: none;
    border: none;
    font-size: 2rem;
    margin-right: 0.5rem;
    cursor: pointer;
    z-index: 1001;
  }
  #main-menu.hide-menu {
    display: none;
  }
}

img {
  display: block;
  max-width: 100%;
  width: 100%;
  height: auto;
}

nav ul li a,
.tag-badge,
.author-badge,
.post-title {
  color: inherit !important;
  display: inline;
  position: relative;
  text-decoration: none;
  transition: color 0.2s;
}
nav ul li a::after,
.tag-badge::after,
.author-badge::after,
.post-title::after {
  background: currentColor;
  content: '';
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  bottom: -2px;
  width: 100%;
  height: 2px;
  border-radius: 1px;
  transform: scaleX(0);
  transition: transform 0.2s cubic-bezier(0.4,0,0.2,1);
}
.post-title::after {
  height: 3px;
  border-radius: 2px;
}
nav ul li a:hover::after,
.tag-badge:hover::after,
.author-badge:hover::after,
.post-title:hover::after {
  transform: scaleX(1);
}

body.darkmode nav ul li a,
body.darkmode .tag-badge,
body.darkmode .author-badge,
body.darkmode .post-title {
  color: inherit;
}
nav ul li a::after,
.tag-badge::after,
.author-badge::after,
.post-title::after {
  background: currentColor;
  content: '';
  display: block;
  position: absolute;
  left: 0;
  bottom: -2px;
  width: 100%;
  height: 2px;
  border-radius: 1px;
  transform: scaleX(0);
  transition: transform 0.2s cubic-bezier(0.4,0,0.2,1);
}
nav ul li a:hover::after,
.tag-badge:hover::after,
.author-badge:hover::after {
  transform: scaleX(1);
}
.post-title {
  position: relative;
  text-decoration: none;
  transition: color 0.2s;
  display: inline;
  color: inherit !important;
}
.post-title::after {
  content: '';
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  bottom: -2px;
  width: 100%;
  height: 3px;
  background: currentColor;
  border-radius: 2px;
  transform: scaleX(0);
  transition: transform 0.2s cubic-bezier(0.4,0,0.2,1);
}
.post-title:hover::after {
  transform: scaleX(1);
}

/* Remove underline animation from all headers */
h1:not(header h1)::after,
h2::after,
h3::after,
h4::after,
h5::after,
h6::after {
  content: none !important;
}

/* Dark mode toggle icon styles */
#darkmode-toggle {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
  margin-left: 1rem;
  vertical-align: middle;
  display: flex;
  align-items: center;
}
#darkmode-toggle svg {
  width: 1.56em; /* 25% bigger than 1.25em */
  height: 1.56em;
  display: block;
  fill: currentColor;
  transition: color 0.2s;
}

#darkmode-toggle-container {
  position: fixed;
  top: 1.25rem;
  right: 2rem;
  z-index: 1000;
  background: none;
  box-shadow: none;
  border: none;
}
@media (max-width: 600px) {
  #darkmode-toggle-container {
    top: 0.5rem;
    right: 0.5rem;
  }
}

#icon-moon {
  color: #fff;
  fill: #fff;
}

.tag-link-animated {
  color: inherit;
  text-decoration: none;
  position: relative;
  display: inline;
  transition: color 0.2s;
}
.tag-link-animated::after {
  content: '';
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  bottom: -2px;
  width: 100%;
  height: 2px;
  background: currentColor;
  border-radius: 1px;
  transform: scaleX(0);
  transition: transform 0.2s cubic-bezier(0.4,0,0.2,1);
}
.tag-link-animated:hover::after {
  transform: scaleX(1);
}


.toc {
  all:unset;
}

